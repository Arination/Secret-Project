//jshint esversion:6
const md5 = require('md5');
require('dotenv').config()
// console.log(process.env.SECRET)
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");
const encrypt = require("mongoose-encryption");
const bcrypt = require('bcrypt');
const session = require('express-session');
const passport = require('passport');
const passportLM = require('passport-local-mongoose');

const saltRounds = 10;
 
const app = express();
 
app.set("view engine", "ejs");
app.use(express.static("public"));
app.use(bodyParser.urlencoded({
    extended : true
}));
 
app.use(session({
    secret: "long long time ago something happened",
    resave: false,
    saveUninitialized: false
}));

app.use(passport.initialize());
app.use(passport.session());


mongoose.connect("mongodb://0.0.0.0:27017/userDB");
 
const userSchema = new mongoose.Schema({
    email : String,
    password : String
});

userSchema.plugin(passportLM);


// userSchema.plugin(encrypt, {secret: process.env.SECRET, encryptedFields: ["password"]});


const User = mongoose.model("User", userSchema);

passport.use(User.createStrategy());

passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());

// passport.use(new LocalStrategy(
//     function(username, password, done) {
//       User.findOne({ username: username }, function (err, user) {
//         if (err) { return done(err); }
//         if (!user) { return done(null, false); }
//         if (!user.verifyPassword(password)) { return done(null, false); }
//         return done(null, user);
//       });
//     }
//   ));

// passport.serializeUser(function(user, done) {
//     done(null, user.id);
//   });
  
//   passport.deserializeUser(function(id, done) {
//     User.findById(id, function (err, user) {
//       done(err, user);
//     });
//   });



app.get("/", (req,res)=>{
    res.render("home");
});
 
app.route("/login")
.get((req,res)=>{
    res.render("login");
})
.post((req,res)=>{
    const username = req.body.username;
    const password = req.body.password;
 
    User.findOne({email : username })
    .then((foundUser)=> {
            bcrypt.compare(password, foundUser.password).then(function(result) {
                 if(result === true){
                    res.render("secrets");
                 }
            });
    })
    .catch((err)=> console.log(err));
})
 
app.route("/register")
.get((req,res)=>{
    res.render("register");
})
 
.post((req,res)=>{
    bcrypt.hash(req.body.password, saltRounds, function(err, hash) {
        // Store hash in your password DB.
        const newUser = new User({
            email : req.body.username,
            password : hash
        });
        newUser.save()
        .then(()=> res.render("secrets"))
        .catch((err)=> console.log(err))
    });
    
});
 
app.listen(3000, function(req,res){
    console.log("Server Running at Port 3000");
});


========================================================================
require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const session = require("express-session");
const passport = require("passport");
const passportLocalMongoose = require("passport-local-mongoose");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const findOrCreate = require("mongoose-findorcreate");
 
const app = express();
 
app.use(express.static("public"));
app.set("view engine", "ejs");
app.use(bodyParser.urlencoded({
    extended: true
}));
 
app.use(session({
    secret: "Our little secret.",
    resave: false,
    saveUninitialized: false
}));
 
app.use(passport.initialize());
app.use(passport.session());
 
mongoose.connect("mongodb://localhost:27017/userDB", { useNewUrlParser: true });
 
const userSchema = new mongoose.Schema({
    email: String,
    password: String,
    googleId: String,
    secret: String
});
 
userSchema.plugin(passportLocalMongoose);
userSchema.plugin(findOrCreate);
 
const User = new mongoose.model("User", userSchema);
 
passport.use(User.createStrategy());
 
passport.serializeUser(function (user, cb) {
    process.nextTick(function () {
        return cb(null, {
            id: user.id,
        });
    });
});
 
passport.deserializeUser(function (user, cb) {
    process.nextTick(function () {
        return cb(null, user);
    });
});
 
passport.use(new GoogleStrategy({
    clientID: process.env.CLIENT_ID,
    clientSecret: process.env.CLIENT_SECRET,
    callbackURL: "http://localhost:3000/auth/google/secrets",
},
    function (accessToken, refreshToken, profile, cb) {
        User.findOrCreate({ googleId: profile.id }, function (err, user) {
            return cb(err, user);
        });
    }
));
 
app.get("/", function (req, res) {
    res.render("home");
});
 
app.get('/auth/google', passport.authenticate("google", { scope: ["profile"] }));
 
app.get('/auth/google/secrets',
    passport.authenticate('google', { failureRedirect: '/login' }),
    function (req, res) {
        res.redirect("/secrets");
    });
 
app.get("/login", function (req, res) {
    res.render("login");
});
 
app.get("/register", function (req, res) {
    res.render("register");
});
 
app.get("/secrets", function (req, res) {
    User.find({ "secret": { $ne: null } })
        .then((foundUsers) => {
            if (foundUsers) {
                res.render("secrets", { usersWithSecrets: foundUsers });
            }
        })
        .catch((err) => {
            console.log(err);
        });
});
 
app.get("/submit", function (req, res) {
    if (req.isAuthenticated()) {
        res.render("submit");
    } else {
        res.redirect("/login");
    }
});
 
app.post("/submit", function (req, res) {
    const submittedSecret = req.body.secret;
 
    User.findById(req.user.id)
        .then((foundUser) => {
            if (foundUser) {
                foundUser.secret = submittedSecret;
                foundUser.save()
                    .then(() => {
                        res.redirect("/secrets");
                    });
            } else {
                console.log("User not found");
            }
        })
        .catch((err) => {
            console.log(err);
        });
});
 
app.get("/logout", function (req, res) {
    req.logout((err) => {
        if (err) {
            console.log(err);
        } else {
            res.redirect("/");
        }
    });
});
 
app.post("/register", function (req, res) {
    User.register({ username: req.body.username }, req.body.password, function (err, user) {
        if (err) {
            console.log(err);
            res.redirect("/register");
        } else {
            passport.authenticate("local")(req, res, function () {
                res.redirect("/secrets");
            });
        }
    });
});
 
app.post("/login", function (req, res) {
    const user = new User({
        username: req.body.username,
        password: req.body.password
    });
 
    req.login(user, function (err) {
        if (err) {
            console.log(err);
        } else {
            passport.authenticate("local")(req, res, function () {
                res.redirect("/secrets");
            });
        }
    })
});
 
 
app.listen(3000, function () {
    console.log("Server started on port 3000");
});

========================================================
//jshint esversion:6
require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");
const session = require("express-session");
const passport = require("passport");
const passportLocalMongoose = require("passport-local-mongoose");
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const findOrCreate = require("mongoose-findorcreate");
 
const app = express();
 
app.use(express.static("public"));
app.set("view engine", "ejs");
app.use(bodyParser.urlencoded({ extended: true }));
 
// app use session package
app.use(
  session({
    secret: "Our little secret.",
    resave: false,
    saveUninitialized: false,
  })
);
 
app.use(passport.initialize());
app.use(passport.session());
 
// DB connection
mongoose.connect("mongodb://127.0.0.1:27017/userDB", { useNewUrlParser: true });
 
// Schema
const userSchema = new mongoose.Schema({
  email: String,
  password: String,
  googleId: String,
  secret: String
});
 
userSchema.plugin(passportLocalMongoose);
userSchema.plugin(findOrCreate);
 
// Model
const User = mongoose.model("User", userSchema);
 
passport.use(User.createStrategy());
 
passport.serializeUser(function(user, cb) {
  process.nextTick(function() {
    return cb(null, user.id);
  });
});

passport.deserializeUser(function(id, cb) {
  User.findById(id)
    .then(user => {
      if (user) {
        cb(null, user);
      } else {
        cb(new Error('User not found'));
      }
    })
    .catch(err => {
      cb(err);
    });
});
passport.use(new GoogleStrategy({
  clientID: process.env.CLIENT_ID,
  clientSecret: process.env.CLIENT_SECRET,
  callbackURL: "http://localhost:3000/auth/google/secrets",
  // userProfileURL: "https://www.googleapis.com/oauth2/v3/userinfo",
  scope: ["email", "profile"]
},
function(accessToken, refreshToken, profile, cb) {
  console.log(profile);
  User.findOrCreate({ googleId: profile.id, username:profile.emails[0].value }, function (err, user) {
    return cb(err, user);
  });
}
));
 
// GET REQUESTS
app.get("/", function (req, res) {
  res.render("home");
});

app.get("/auth/google",
  passport.authenticate("google", { scope: ["email", "profile"] }));

app.get("/auth/google/secrets", 
passport.authenticate("google", { failureRedirect:" /login" }),
function(req, res) {
    // Successful authentication, redirect home.
  res.redirect('/secrets');
});
 
app.get("/login", function (req, res) {
  res.render("login");
});
 
app.get("/register", function (req, res) {
  res.render("register");
});
 
app.get("/secrets", function (req, res, next) {
  User.find({ secret: { $ne: null } })
    .then(users => {
      if (users) {
        res.render("secrets", { usersSecrets: users });
      } else {
        next(new Error('User not found'));
      }
    })
    .catch(next); // Pass any errors to the next middleware
});


app.get("/submit", function(req, res){
  if (req.isAuthenticated()) {
    res.render("submit");
  } else {
    res.redirect("/login");
  }
})
 
app.get("/logout", function (req, res, next) {
  req.logout(function (err) {
    if (err) {
      return next(err);
    } else {
      res.redirect("/");
    }
  });
});
 
// POST REQUESTS
app.post("/register", function (req, res) {
  User.register(
    { username: req.body.username },
    req.body.password,
    function (err, user) {
      if (err) {
        console.log(err);
        res.redirect("/register");
      } else {
        passport.authenticate("local")(req, res, function () {
          res.redirect("/secrets");
        });
      }
    }
  );
});
 
app.post("/login", function (req, res) {
  const user = new User({
    username: req.body.username,
    password: req.body.password,
  });
 
  req.login(user, function (err) {
    if (err) {
      console.log(err);
    } else {
      passport.authenticate("local")(req, res, function () {
        res.redirect("/secrets");
      });
    }
  });
});
 
app.post("/submit", function (req, res, next) {
  const secret = req.body.secret;
  const userSecretId = req.user.id;

  User.findById(userSecretId)
    .then(user => {
      if (user) {
        user.secret = secret;
        user.save()
          .then(() => {
            res.redirect("/secrets");
          })
          .catch(err => {
            console.error(err);
            next(err); // Pass the error to the next middleware
          });
      } else {
        next(new Error('User not found'));
      }
    })
    .catch(next); // Pass any errors to the next middleware
});



app.listen(3000, function () {
  console.log("Server started on port 3000");
});